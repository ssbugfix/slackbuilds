#!/bin/sh

name="nginx"
version="1.24.0"
filename="${name}-${version}.tar.gz"
arch="${ARCH:-$(uname -m)}"
rev="1"
hostgcc=$(gcc -dumpmachine)
cwd=$(pwd)
tmpdir="/tmp"
pkgdir="${tmpdir}/${name}-${version}-install"
# ------
clienttemp="/var/tmp/${name}/client"
proxytemp="/var/tmp/${name}/proxy"
fastcgitemp="/var/tmp/${name}/fastcgi"
uwsgitemp="/var/tmp/${name}/uwsgi"
scgitemp="/var/tmp/${name}/scgi"
# ------

case "${arch}" in
  i486|i686) SLKCFLAGS="-O2 -march=i486 -mtune=i686"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  x86_64)    SLKCFLAGS="-O2 -fPIC"
             SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
             ;;
  athlon-xp) SLKCFLAGS="-march=athlon-xp -O3 -pipe -fomit-frame-pointer"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
esac

boldecho() {
	echo -e "\n\033[1m$1\033[0m" && sleep 1
}

do_exit() {
	boldecho "Exiting due error or interrupt"
	exit 1
}

do_unpack(){
	test -f ${cwd}/${filename} || return 1
	boldecho "Unpacking"
	tar xvfz "${cwd}/${filename}" || return 1
	return 0
}

do_configure() {
	boldecho "Running configure"
	LDFLAGS="$SLKLDFLAGS" \
	CFLAGS="$SLKCFLAGS" \
	CXXFLAGS="$SLKCFLAGS" \
	./configure \
		--prefix=/usr \
		--sbin-path=/usr/sbin/${name} \
		--conf-path=/etc/${name}/${name}.conf \
		--http-log-path=/var/log/${name}/access.log \
		--error-log-path=/var/log/${name}/error.log \
		--pid-path=/var/run/${name}.pid \
		--lock-path=/var/lock/${name}.lock \
		--user=nginx \
		--group=daemon \
		--modules-path=/usr/lib${LIBDIRSUFFIX}/nginx \
		--with-select_module \
		--with-poll_module \
		--with-http_ssl_module \
		--with-http_realip_module \
		--with-http_addition_module \
		--with-http_xslt_module \
		--with-http_sub_module \
		--with-http_dav_module \
		--with-http_flv_module \
		--with-http_mp4_module \
		--with-http_gzip_static_module \
		--with-http_random_index_module \
		--with-http_secure_link_module \
		--with-http_degradation_module \
		--with-http_stub_status_module \
		--http-client-body-temp-path=${clienttemp} \
		--http-proxy-temp-path=${proxytemp} \
		--http-fastcgi-temp-path=${fastcgitemp} \
		--http-uwsgi-temp-path=${uwsgitemp} \
		--http-scgi-temp-path=${scgitemp} \
		--with-mail \
		--with-mail_ssl_module \
		--with-pcre || return 1
	return 0
}

do_make() {
	boldecho "Running make "
	make -j 2 || return 1
	return 0
}

do_install() {
	boldecho "Installing"
	make DESTDIR="${pkgdir}" install || return 1
	mkdir -pv "${pkgdir}${clienttemp}"
	mkdir -pv "${pkgdir}${proxytemp}"
	mkdir -pv "${pkgdir}${fastcgitemp}"
	mkdir -pv "${pkgdir}${uwsgitemp}"
	mkdir -pv "${pkgdir}${scgitemp}"
	mkdir -pv "${pkgdir}/var/lock"
	mkdir -pv "${pkgdir}/etc/rc.d/"
	mkdir -pv "${pkgdir}/usr/man/man8"
	rm -vfr ${pkgdir}/usr/html
	cp -v man/nginx.8 ${pkgdir}/usr/man/man8/
	for i in fastcgi.conf fastcgi_params koi-utf koi-win mime.types nginx.conf scgi_params uwsgi_params win-utf
	do
		mv -v ${pkgdir}/etc/nginx/${i} ${pkgdir}/etc/nginx/${i}.new
	done
	cp ${cwd}/rc.nginx ${pkgdir}/etc/rc.d/rc.nginx.new
	return 0
}

do_man() {
	boldecho "Processing man pages"
	for i in {1..9} n m
	do
		rm -vf ${pkgdir}/usr/man/man${i}/*.gz
		( test -d ${pkgdir}/usr/man/man${i} && cd ${pkgdir}/usr/man/man${i} && gzip -v * )
	done
	return 0
}

do_doc() {
	boldecho "Processing docs"
	mkdir -p ${pkgdir}/usr/doc/${name}-${version}/contrib
	cp -a LICENSE README CHANGES.ru CHANGES contrib ${pkgdir}/usr/doc/${name}-${version}/
	cp ${cwd}/${name}.SlackBuild ${pkgdir}/usr/doc/${name}-${version}/${name}.SlackBuild
}

do_strip(){
	boldecho "Stripping"
	find "${pkgdir}" | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
	find "${pkgdir}" | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
	return 0
}

do_descr() {
	boldecho "Making description"
	mkdir -p "${pkgdir}/install"
	cat ${cwd}/slack-desc > "${pkgdir}/install/slack-desc"
}

do_doinst() {
	cat ${cwd}/doinst.sh.in > "${pkgdir}/install/doinst.sh" 
	chmod 700 "${pkgdir}/install/doinst.sh"
}

do_clean() {
	rm -rf "${pkgdir}" "${tmpdir}/${name}-${version}"
}

boldecho "${name}.SlackBuild for ${filename}"

if [ ${UID} != 0 ]
then
	boldecho "You must be root to use this script" && do_exit
fi

if [ -d "${tmpdir}/${name}-${version}" ]
then
	boldecho "Found previous build directory. Removing."
	rm -rf "${tmpdir}/${name}-${version}"
fi

if [ ! -r "${filename}" ]
then
	boldecho "Cannot locate ${filename}" || do_exit
fi

trap 'do_clean; do_exit' TERM INT

cd "${tmpdir}" || do_exit
do_unpack || do_exit
cd "${name}-${version}" || do_exit
chown -R root:root . || do_exit
do_configure || do_exit
do_make || do_exit
do_install || do_exit
do_man
do_doc
do_strip
do_descr
do_doinst
cd "${pkgdir}" || do_exit
/sbin/makepkg -l y -c n "${tmpdir}/${name}-$(echo ${version} | tr -d '-')-${arch}-${rev}.txz" || do_exit
cd "${cwd}" || do_exit
do_clean
boldecho "Done"
exit 0
